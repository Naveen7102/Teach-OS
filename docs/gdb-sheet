Some useful gdb commands one can use to investigate what the code 
that is running looks like, in addition to of course debugging real code.

NOTE: Before using gdb, make sure to compile code with a '-g' flag and 
you may want to experiment by turning off optimizations.

A SUPER QUICK INTRO with a sample run

Here is a sample run, you should be able to do this with a very simple program,
perhaps it a main() and one more function with local variables.

$ gcc -g myprog.c # will compile the program so that you can use gdb on it meaningfully
$ gdb a.out
(gdb) l		  # will list program source
(gdb) l <lineno>  # will list program source from given lineno
(gdb) l <funcn>   # will list program source from given function
(gdb) b <lineno>  # set a breakpoint at the given lineno
(gdb) b <funcn>   # set a breakpoint at the given  function
(gdb) run         # Run the program from beginning and stop at the next breakpoint
(gdb) n		  # will execute the current line and stop after that
(gdb) s		  # like n, but if its a call it steps into the function and stop
(gdb) p <varname> # will print the value of the given variable
(gdb) info locals # will print all local and their values 
(gdb) info frame  # will print information about the current stack frame
(gdb) set variable <varname> = <val> # will assign a value to a variable
(gdb) cont        # will continue execution from the current line till the next breakpoint


OTHER USEFUL COMMANDS:
 
* Listng lines of code:
  (gdb) list [n] 
* Listing lines starting at the current ip
  (gdb) list * $rip
* looking at assembler code 
  (gdb) disassemble 		; lists assembly of the current function
  (gdb) disassemble * $rip
  (gdb) disassemble <fn>
* Stack frames listing
  (gdb) bt
  (gdb) bt full
* more informatio with info
  (gdb) info frame [n]    	; information abouta stack frame (0 is topmost)
  (gdb) info locals		; information about locals and args
  (gdb) info args
* Dumping the contents of memory
  (gdb) x/nfu <addr>    
 eg x/20xw $rip           ; examine 20 hexformatted words starting at $rip
    x/20db $rbp-12        ; useful to examine something moved into $rbp-0xc
    x/20db 0x55000000     ; dump content of memory byte wise starting at 0x5500

More details list of commands
	 https://ccrma.stanford.edu/~jos/stkintro/Useful_commands_gdb.html
Also see a quick overview
	 https://www.geeksforgeeks.org/gdb-step-by-step-introduction/
